load "Element_P3";
verbosity=0;
real cpu=clock();
real t;
real mu1=-0.0025;
real mu2=-0.001;
real mu3=0.0;
real d1=0.1;
real d2=0.02;
real d3=0.01;

real avg1, avg2, avg3, avgk;
real uval1, uval2, uval3, kval;

ofstream data1("BDF2-RDE-3N-avg-diff_d1_0_1_d2_0_02_d3_0_01_mu1_minus_0_005_mu2_minus_0_001_mu3_0_0");

int J=3;

  func r=(1.5+sin(x)*sin(y))*(1.2+sin(t));
 //   func r=1;
 // func CarryingCapacity=(2.1+cos(pi*x)*cos(pi*y))*(1.1+cos(t));
  func CarryingCapacity=(2.5*pi*pi*exp(-(x-0.5)*(x-0.5)-(y-0.5)*(y-0.5))+1.2)*(1+0.3*cos(t));
  
    func u10=1.6;
    func u20=1.6;
    func u30=1.6;

 // func u10=(1.1+sin(t))*(2.0+sin(y));
 // func u20=(2.0+cos(t))*(1.1+cos(x));
 // func u30=(1.1+sin(t))*(1.1+cos(y));

  //func u1true=(1.1+sin(t))*(2.0+sin(y));
  //func u2true=(2.0+cos(t))*(1.1+cos(x));
  //func u3true=(1.1+sin(t))*(1.1+cos(y));

  //func u1truex=0;
  //func u1truey=(1.1+sin(t))*cos(y);

  //func u2truex=-(2.0+cos(t))*sin(x);
  //func u2truey=0;

  //func u3truex=0;
  //func u3truey=-(1.1+sin(t))*sin(y);

  //func f1=cos(t)*(2.0+sin(y))+d1*(1.1+sin(t))*sin(y)-r*u1true*(1-mu1-(u1true+u2true+u3true)/CarryingCapacity);
  //func f2=-sin(t)*(1.1+cos(x))+d2*(2.0+cos(t))*cos(x)-r*u2true*(1-mu2-(u1true+u2true+u3true)/CarryingCapacity);
  //func f3=cos(t)*(1.1+cos(y))+d3*(1.1+sin(t))*cos(y)-r*u3true*(1-mu3-(u1true+u2true+u3true)/CarryingCapacity);

    func f1=0;
    func f2=0;
    func f3=0;




  real time=0.0;

  border a1(t=0,1){x=t; y=0; label=1;}
  border a2(t=0,1){x=1; y=t; label=2;}
  border a3(t=0,1){x=1-t; y=1; label=3;}
  border a4(t=0,1){x=0; y=1-t; label=4;}
  int m=25;
  mesh th = buildmesh( a1(m)+a2(m)+a3(m)+a4(m));

  //mesh th= square(32,32);

  fespace Vh(th,P2);

  Vh un1,un2,un3,unn1,unn2,unn3;
  Vh u1,u2,u3,v,w,z;

  int nbiter = 11000;
  real dt = 0.1;
 // real dt = atan(1)/2.0;
  //real dt = 0.001/real(nbiter);
  int iter=0;

  cout << " The dof for velocity=" <<v.n <<endl;
  cout << " The dof for magnetic field=" << w.n <<endl;


  int mm=101;
   real incr1=10.0/(mm-1.0);
   real incr2=10.0/(mm-1.0);

   real[int] xvec(mm);
   real[int] yvec(mm);

   for (int i = 0; i < mm ; ++i){
       xvec[i]= 0.0 + incr1*i;
       yvec[i]= 0.0 + incr2*i;
      }


  problem BERDE1 (u1,v,solver=UMFPACK) =

    int2d(th)(
     // 1.0/dt (u_h^{n+1},v_h^{n+1})

           1.0/dt * ( u1*v)


     // +(grad u_h^{n+1},grad v_h^{n+1})

       + d1*( dx(u1)*dx(v) + dy(u1)*dy(v))
       + r*mu1*u1*v
       - r*u1*v*(1-(un1+un2+un3)/CarryingCapacity)
         )
    + int2d(th)(
     // -1/dt (u_h^n,v_h^{n+1})
      - 1/dt*(un1*v)
      -f1*v);
   // + on(1,2,3,4, u1 = 0);


  problem BERDE2 (u2,w,solver=UMFPACK) =

    int2d(th)(
     // 1.0/dt (u_h^{n+1},v_h^{n+1})

           1.0/dt * ( u2*w)


     // +(grad u_h^{n+1},grad v_h^{n+1})

       + d2*( dx(u2)*dx(w) + dy(u2)*dy(w))
       + r*mu2*u2*w
       - r*u2*w*(1-(un1+un2+un3)/CarryingCapacity)
         )
    + int2d(th)(
     // -1/dt (u_h^n,v_h^{n+1})
      - 1/dt*(un2*w)
      -f2*w);
   // + on(1,2,3,4, u2 = 0);

  
   problem BERDE3 (u3,z,solver=UMFPACK) =

    int2d(th)(
     // 1.0/dt (u_h^{n+1},v_h^{n+1})

           1.0/dt * ( u3*z)


     // +(grad u_h^{n+1},grad v_h^{n+1})

       + d3*( dx(u3)*dx(z) + dy(u3)*dy(z))
       + r*mu3*u3*z
       - r*u3*z*(1-(un1+un2+un3)/CarryingCapacity)
         )
    + int2d(th)(
     // -1/dt (u_h^n,v_h^{n+1})
      - 1/dt*(un3*z)
      -f3*z);
   // + on(1,2,3,4, u3 = 0);


  problem BDF2RDE1 (u1,v,solver=UMFPACK) =

    int2d(th)(
     // 1.5/dt (u_h^{n+1},v_h^{n+1})

           1.5/dt * ( u1*v)


     // +(grad u_h^{n+1},grad v_h^{n+1})

       + d1*( dx(u1)*dx(v) + dy(u1)*dy(v))
       + r*mu1*u1*v
       - r*u1*v*(1-(2*un1+2*un2+2*un3-unn1-unn2-unn3)/CarryingCapacity)
         )
      + int2d(th)(
     // -2/dt (u_h^n,v_h^{n+1})
      - 2.0/dt*(un1*v)
     //+0.5/dt (u_h^{n-1},v_h^{n+1})
       +0.5/dt*(unn1*v)
      -f1*v);
   // + on(1,2,3,4, u1 = 0);


  problem BDF2RDE2 (u2,w,solver=UMFPACK) =

    int2d(th)(
     // 1.5/dt (u_h^{n+1},v_h^{n+1})

           1.5/dt * ( u2*w)

     // +(grad u_h^{n+1},grad v_h^{n+1})

       + d2*( dx(u2)*dx(w) + dy(u2)*dy(w))
       + r*mu2*u2*w
       - r*u2*w*(1-(2*un1+2*un2+2*un3-unn1-unn2-unn3)/CarryingCapacity)
         )
    + int2d(th)(
     // -2/dt (u_h^n,v_h^{n+1})
      - 2.0/dt*(un2*w)

     //+0.5/dt (u2_h^{n-1},v_h^{n+1})
       +0.5/dt *(unn2*w)

      -f2*w);
    //+ on(1,2,3,4, u2 = 0);


  problem BDF2RDE3 (u3,z,solver=UMFPACK) =

    int2d(th)(
     // 1.5/dt (u_h^{n+1},v_h^{n+1})

           1.5/dt * ( u3*z)

     // +(grad u_h^{n+1},grad v_h^{n+1})

       + d3*( dx(u3)*dx(z) + dy(u3)*dy(z))
       + r*mu3*u3*z
       - r*u3*z*(1-(2*un1+2*un2+2*un3-unn1-unn2-unn3)/CarryingCapacity)
         )
    + int2d(th)(
     // -2/dt (u_h^n,v_h^{n+1})
      - 2.0/dt*(un3*z)

     //+0.5/dt (u2_h^{n-1},v_h^{n+1})
       +0.5/dt *(unn3*z)

      -f3*z);
    //+ on(1,2,3,4, u3 = 0);

  // Initializing at time t=0.0
 
  t=0;

  un1=u10;
  un2=u20;
  un3=u30;

  avg1=int2d(th)(un1);
  avg2=int2d(th)(un2);
  avg3=int2d(th)(un3);
  avgk=int2d(th)(CarryingCapacity);

  data1 << t<<"    "<<avgk<<" "<<avg1<<"  "<<avg2<<"   "<<avg3<<endl;

  iter = 1;
  t = dt*iter;
  time = t;

  BERDE1;
  BERDE2;
  BERDE3;

  unn1=un1;
  unn2=un2;
  unn3=un3;

  un1=u1;
  un2=u2;
  un3=u3;

  avg1=int2d(th)(un1);
  avg2=int2d(th)(un2);
  avg3=int2d(th)(un3);
  avgk=int2d(th)(CarryingCapacity);

  data1 << t<<"    "<<avgk<<" "<<avg1<<"  "<<avg2<<"   "<<avg3<<endl;
  cout<<"Time = "<<t <<"   "<<avgk<<"  "<<avg1<<"  "<<avg2<<"    "<<avg3<<endl;
for (iter = 2; iter <= nbiter; iter++) {
  
   t = dt*iter;
   time = t;


   BDF2RDE1;
   BDF2RDE2;
   BDF2RDE3;

   unn1=un1;
   unn2=un2;
   unn3=un3;

   un1=u1;
   un2=u2;
   un3=u3;

   avg1=int2d(th)(un1);
   avg2=int2d(th)(un2);
   avg3=int2d(th)(un3);
   avgk=0.5*int2d(th)(CarryingCapacity);

  data1 << t<<"    "<<avgk<<" "<<avg1<<"  "<<avg2<<"   "<<avg3<<endl;


  cout<<"Time = "<<t <<"   "<<avgk<<"  "<<avg1<<"  "<<avg2<<"    "<<avg3<<endl;


  if((iter/100)==(iter/100.)){
         ofstream data("space_time_"+iter) ;

         for (int ix = 0; ix < xvec.n ; ix++){
           for (int iy = 0; iy < yvec.n ; iy++){
                uval1 = u1(xvec[ix], yvec[iy]);
                uval2 = u2(xvec[ix], yvec[iy]);
                uval3 = u3(xvec[ix], yvec[iy]);
                 kval = CarryingCapacity(xvec[ix], yvec[iy]);

                data << xvec[ix]<< "   " << yvec[iy] << "  "<< uval1<< "   "<<uval2<<"   "<<uval3<<"    "<<kval<<endl;
             }
       }

     }

}

