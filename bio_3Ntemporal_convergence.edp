load "Element_P3";
verbosity=0;
real cpu=clock();
real t;
real mu1=0.001;
real mu2=0.0006;
real mu3=0.00;
real d1=1.0;
real d2=1.0;
real d3=1.0;

int J=3;

real time=0.0;

real [int] L2H1Erroru1(8);
real [int] L2H1Erroru2(8);
real [int] L2H1Erroru3(8);

for (int i=0;i<8;i++){
   L2H1Erroru1(i) = 0.0;
   L2H1Erroru2(i) = 0.0;
   L2H1Erroru3(i) = 0.0;
}

//border a1(t=0,4){x=t; y=0; label=1;}
//border a2(t=0,4){x=4; y=t; label=2;}
//border a3(t=0,4){x=4-t; y=4; label=3;}
//border a4(t=0,4){x=0; y=4-t; label=4;}

//mesh th = buildmesh( a1(15)+a2(15)+a3(15)+a4(15));

//plot(th);

for ( int k=0; k<6; k++){
  
  real H1erroru1=0; 
  real H1erroru2=0;
  real H1erroru3=0;
  real timeStepErroru1=0;
  real timeStepErroru2=0;
  real timeStepErroru3=0;

  mesh th= square(64,64);

  fespace Vh(th,P2);

  Vh un1,un2,un3,v,w,z;
  Vh u1,u2,u3;

  //int nbiter = 100;
  int nbiter = 2^(2+k);
  real dt = 1.0/real(nbiter);
  int iter=0;

  cout << " The dof for velocity=" <<v.n <<endl;
  cout << " The dof for magnetic field=" << w.n <<endl;

  func r=(1.5+sin(x)*sin(y))*(1.2+sin(t));
  func CarryingCapacity=(2.1+cos(pi*x)*cos(pi*y))*(1.1+cos(t));
  func u10=(1.1+sin(t))*(2.0+sin(y));
  func u20=(2.0+cos(t))*(1.1+cos(x));
  func u30=(1.1+sin(t))*(1.1+cos(y));

  func u1true=(1.1+sin(t))*(2.0+sin(y));
  func u2true=(2.0+cos(t))*(1.1+cos(x));
  func u3true=(1.1+sin(t))*(1.1+cos(y));

  func u1truex=0;
  func u1truey=(1.1+sin(t))*cos(y);

  func u2truex=-(2.0+cos(t))*sin(x);
  func u2truey=0;

  func u3truex=0;
  func u3truey=-(1.1+sin(t))*sin(y);

  func f1=cos(t)*(2.0+sin(y))+d1*(1.1+sin(t))*sin(y)-r*u1true*(1-mu1-(u1true+u2true+u3true)/CarryingCapacity);
  func f2=-sin(t)*(1.1+cos(x))+d2*(2.0+cos(t))*cos(x)-r*u2true*(1-mu2-(u1true+u2true+u3true)/CarryingCapacity);
  func f3=cos(t)*(1.1+cos(y))+d3*(1.1+sin(t))*cos(y)-r*u3true*(1-mu3-(u1true+u2true+u3true)/CarryingCapacity);  


  problem BERDE1 (u1,v,solver=UMFPACK) =

    int2d(th)(
     // 1.0/dt (u_h^{n+1},v_h^{n+1})

           1.0/dt * ( u1*v)

     // +(grad u_h^{n+1},grad v_h^{n+1})

       + d1*( dx(u1)*dx(v) + dy(u1)*dy(v))
       + r*mu1*u1*v
       - r*u1*v*(1-(un1+un2+un3)/CarryingCapacity)
         )
    + int2d(th)(
     // -1/dt (u_h^n,v_h^{n+1})
      - 1/dt*(un1*v)
      -f1*v)
    + on(1,2,3,4, u1 = u1true);


   problem BERDE2 (u2,w,solver=UMFPACK) =

    int2d(th)(
     // 1.0/dt (u_h^{n+1},v_h^{n+1})

           1.0/dt * ( u2*w)

     // +(grad u_h^{n+1},grad v_h^{n+1})

       + d2*( dx(u2)*dx(w) + dy(u2)*dy(w))
       + r*mu2*u2*w
       - r*u2*w*(1-(un1+un2+un3)/CarryingCapacity)
         )
    + int2d(th)(
     // -1/dt (u_h^n,v_h^{n+1})
      - 1/dt*(un2*w)
      -f2*w)
    + on(1,2,3,4, u2 = u2true);


   problem BERDE3 (u3,z,solver=UMFPACK) =

    int2d(th)(
     // 1.0/dt (u_h^{n+1},z_h^{n+1})

           1.0/dt * ( u3*z)

     // +(grad u_h^{n+1},grad v_h^{n+1})

       + d2*( dx(u3)*dx(z) + dy(u3)*dy(z))
       + r*mu3*u3*z
       - r*u3*z*(1-(un1+un2+un3)/CarryingCapacity)
         )
    + int2d(th)(
     // -1/dt (u_h^n,v_h^{n+1})
      - 1/dt*(un3*z)
      -f3*z)
    + on(1,2,3,4, u3 = u3true);


  // Initializing at time t=0.0
 
  t=0;

  un1=u10;
  un2=u20;
  un3=u30;


  for (iter = 1; iter <= nbiter; iter++) {
  

      t = dt*iter;
      time = t;

      BERDE1;
      BERDE2;
      BERDE3;
   
      un1=u1;
      un2=u2;
      un3=u3;

      cout<<"u10="<<int2d(th)(u10)<<"  "<<"u1="<<int2d(th)(u1)<<"  "<<"error="<<int2d(th)(abs(u1-u10))<<endl;
      cout<<"u20="<<int2d(th)(u20)<<"  "<<"u2="<<int2d(th)(u2)<<"  "<<"error="<<int2d(th)(abs(u2-u20))<<endl;
      cout<<"u30="<<int2d(th)(u30)<<"  "<<"u3="<<int2d(th)(u3)<<"  "<<"error="<<int2d(th)(abs(u3-u30))<<endl;

      timeStepErroru1=int2d(th)((u1truex-dx(u1))^2+(u1truey-dy(u1))^2);
      timeStepErroru2=int2d(th)((u2truex-dx(u2))^2+(u2truey-dy(u2))^2);
      timeStepErroru3=int2d(th)((u3truex-dx(u3))^2+(u3truey-dy(u3))^2);

      H1erroru1= H1erroru1+timeStepErroru1;
      H1erroru2= H1erroru2+timeStepErroru2;
      H1erroru3= H1erroru3+timeStepErroru3;


  }

   L2H1Erroru1(k)=sqrt(dt*H1erroru1);
   L2H1Erroru2(k)=sqrt(dt*H1erroru2);
   L2H1Erroru3(k)=sqrt(dt*H1erroru3);
cout<<"H1erroru1 = "<<L2H1Erroru1(k)<<"   "<<"H1erroru2="<<L2H1Erroru2(k)<<"   "<<"H1erroru3="<<L2H1Erroru3(k)<<endl;
}

cout<<L2H1Erroru1(0)<<"    "<<L2H1Erroru2(0)<<"   "<<L2H1Erroru3(0)<<endl;
cout<<L2H1Erroru1(1)<<"    "<<L2H1Erroru2(1)<<"   "<<L2H1Erroru3(1)<<endl;
cout<<L2H1Erroru1(2)<<"    "<<L2H1Erroru2(2)<<"   "<<L2H1Erroru3(2)<<endl;
cout<<L2H1Erroru1(3)<<"    "<<L2H1Erroru2(3)<<"   "<<L2H1Erroru3(3)<<endl;
cout<<L2H1Erroru1(4)<<"    "<<L2H1Erroru2(4)<<"   "<<L2H1Erroru3(4)<<endl;
cout<<L2H1Erroru1(5)<<"    "<<L2H1Erroru2(5)<<"   "<<L2H1Erroru3(5)<<endl;
//cout<<L2H1Erroru1(6)<<"    "<<L2H1Erroru2(6)<<"   "<<L2H1Erroru3(6)<<endl;
//cout<<L2H1Erroru1(7)<<"    "<<L2H1Erroru2(7)<<"   "<<L2H1Erroru3(7)<<endl;
cout<<"Convergence rate for v"<<endl;

for (int i = 0; i < 5; i++){
  cout<<" convergence rate = "<<log(L2H1Erroru1(i)/L2H1Erroru1(i+1))/log(2.)<<endl;
}
cout<<"Convergence rate for w"<<endl;

for (int i = 0; i < 5; i++){
  cout<<" convergence rate = "<<log(L2H1Erroru2(i)/L2H1Erroru2(i+1))/log(2.)<<endl;
}


cout<<"Convergence rate for z"<<endl;

for (int i = 0; i < 5; i++){
  cout<<" convergence rate = "<<log(L2H1Erroru3(i)/L2H1Erroru3(i+1))/log(2.)<<endl;
}

